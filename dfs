#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>

using namespace std;

// Depth First Search algorithm
void DFS(vector<vector<int>>& graph, vector<bool>& visited, int startNode) {
    stack<int> nodeStack;
    visited[startNode] = true;
    nodeStack.push(startNode);

    // While there are nodes to explore
    while (!nodeStack.empty()) {
        // Pop the top node from the stack
        int currentNode = nodeStack.top();
        nodeStack.pop();

        // Process the node (e.g., print its ID)
        cout << "Visited node: " << currentNode << endl;

        // Explore neighbors in parallel using OpenMP
        #pragma omp parallel for
        for (int i = 0; i < graph[currentNode].size(); ++i) {
            int neighbor = graph[currentNode][i];
            // Acquire a lock to avoid race conditions
            #pragma omp critical
            {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    nodeStack.push(neighbor);
                }
            }
        }
    }
}

int main() {
    // Create an adjacency list representing the graph
    vector<vector<int>> graph = {
        {1, 2},     // Node 0's neighbors
        {0, 3},     // Node 1's neighbors
        {0, 4},     // Node 2's neighbors
        {1},        // Node 3's neighbors
        {2, 5},     // Node 4's neighbors
        {4}         // Node 5's neighbors
    };

    int numNodes = graph.size();
    vector<bool> visited(numNodes, false);

    // Perform DFS traversal
    DFS(graph, visited, 0);  // Starting from node 0

    return 0;
}
