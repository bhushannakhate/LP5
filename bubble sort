#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

// Bubble Sort algorithm
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    bool swapped;

    // Iterate over the array
    for (int i = 0; i < n - 1; i++) {
        swapped = false;

        // Compare and swap adjacent elements in parallel using OpenMP
        #pragma omp parallel for shared(arr, swapped)
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swapped = true;
            }
        }

        // If no elements were swapped in this pass, the array is already sorted
        if (!swapped) {
            break;
        }
    }
}

int main() {
    vector<int> arr = {9, 5, 1, 8, 3, 2, 7, 6, 4};
    int n = arr.size();

    // Print the original array
    cout << "Original array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Perform Bubble Sort
    bubbleSort(arr);

    // Print the sorted array
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
