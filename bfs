#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

// Breath First Search algorithm
void BFS(vector<vector<int>>& graph, vector<bool>& visited, int startNode) {
    queue<int> nodeQueue;
    visited[startNode] = true;
    nodeQueue.push(startNode);

    // While there are nodes to explore
    while (!nodeQueue.empty()) {
        int currentLevelSize = nodeQueue.size();

        // Explore nodes at the current level in parallel using OpenMP
        #pragma omp parallel for
        for (int i = 0; i < currentLevelSize; ++i) {
            int currentNode = nodeQueue.front();
            nodeQueue.pop();

            // Process the node (e.g., print its ID)
            cout << "Visited node: " << currentNode << endl;

            // Explore neighbors
            for (int j = 0; j < graph[currentNode].size(); ++j) {
                int neighbor = graph[currentNode][j];
                // Acquire a lock to avoid race conditions
                #pragma omp critical
                {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        nodeQueue.push(neighbor);
                    }
                }
            }
        }
    }
}

int main() {
    // Create an adjacency list representing the graph
    vector<vector<int>> graph = {
        {1, 2},     // Node 0's neighbors
        {0, 3},     // Node 1's neighbors
        {0, 4},     // Node 2's neighbors
        {1},        // Node 3's neighbors
        {2, 5},     // Node 4's neighbors
        {4}         // Node 5's neighbors
    };

    int numNodes = graph.size();
    vector<bool> visited(numNodes, false);

    // Perform BFS traversal
    BFS(graph, visited, 0);  // Starting from node 0

    return 0;
}
