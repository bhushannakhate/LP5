gcc -fopenmp ass1.cpp -lstdc++
./a.out

#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

int main() {
    vector<int> arr = {9, 5, 1, 8, 3, 2, 7, 6, 4};
    int n = arr.size();

    int minVal = arr[0];
    int maxVal = arr[0];
    int sum = 0;

    // Compute the minimum, maximum, and sum using OpenMP parallelism
    #pragma omp parallel for reduction(min : minVal) reduction(max : maxVal) reduction(+: sum)
    for (int i = 0; i < n; i++) {
        // Update the minimum and maximum values
        if (arr[i] < minVal) {
            minVal = arr[i];
        }
        if (arr[i] > maxVal) {
            maxVal = arr[i];
        }

        // Compute the sum of array elements
        sum += arr[i];
    }

    // Compute the average
    double avg = static_cast<double>(sum) / n;

    // Print the results
    cout << "Minimum value: " << minVal << endl;
    cout << "Maximum value: " << maxVal << endl;
    cout << "Sum: " << sum << endl;
    cout << "Average: " << avg << endl;

    return 0;
}
